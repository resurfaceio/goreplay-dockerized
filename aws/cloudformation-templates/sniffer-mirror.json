{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploys Target, Filter and Session for VPC Traffic Mirroring",
  "Parameters": {
    "VPCID": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Select the VPC that corresponds to your EC2 instance"
    },
    "SubnetID": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Select a public subnet to deploy the Resurface network resources in"
    },
    "EC2NetworkInterfaceID": {
      "Type": "String",
      "Description": "The ID of the network interface attached to the EC2 to mirror traffic from"
    },
    "EC2Address": {
      "Type": "String",
      "Description": "Enter the private IP of the EC2 to mirror traffic from"
    },
    "EC2AppPort": {
      "Type": "String",
      "Description": "Port to mirror traffic from"
    },
    "ResurfaceCaptureURL": {
      "Type": "String",
      "Description": "DB data capturing endpoint for your Resurface instance",
      "Default": "http://localhost:7701/message"
    },
    "ResurfaceRules": {
      "Type": "String",
      "Description": "Logging rules. More info: https://resurface.io/logging-rules",
      "Default": "include debug"
    },
    "ResurfaceKeyPair": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Select an existing EC2 Key Pair to connect to the Resurface EC2 instance using SSH"
    },
    "MirrorSessionNumber": {
      "Type": "Number",
      "Description": "Determines the order in which traffic mirror sessions are evaluated (1 is highest priority). Modify if you have mutiple traffic mirroring sessions only",
      "MinValue": 1,
      "MaxValue": 32766,
      "Default": 1
    },
    "MirrorVirtualNetworkID": {
      "Type": "Number",
      "Description": "VXLAN Network Identifier (VNI) used to idetify VXLAN segments in mirrored packets. Modify if you have another traffic mirroring session that uses the default VNI value",
      "Default": 8864121
    }
  },
  "Resources": {
    "ResurfaceSG": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Resurface Sniffer Security Group",
        "VpcId" : { "Ref": "VPCID" }
      }
    },
    "ResurfaceSGIngress": {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": { "Fn::Join": [ "/", [ { "Ref": "EC2Address" }, "32" ] ] },
        "Description" : "Enable UDP mirrored traffic",
        "FromPort" : 4789,
        "ToPort": 4789,
        "GroupId" : { "Ref": "ResurfaceSG" },
        "IpProtocol" : "udp"
      }
    },
    "ResurfaceSGIngressSSH": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": 22,
        "ToPort": 22,
        "GroupId": { "Ref": "ResurfaceSG" },
        "IpProtocol": "tcp"
      }
    },
    "ResurfaceENI":{
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "GroupSet" : [ { "Ref": "ResurfaceSG" } ],
        "SubnetId" : { "Ref": "SubnetID" }
      }
    },
    "ResurfaceEC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [ { "Ref": "ECSTaskExecutionRole" } ]
      }
    },
    "ResurfaceEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile" : { "Ref": "ResurfaceEC2InstanceProfile" },
        "ImageId": "ami-012da72f43259a29a",
        "InstanceType" : "t3.medium",
        "KeyName": { "Ref": "ResurfaceKeyPair" },
        "NetworkInterfaces": [{
            "DeviceIndex": "0",
            "NetworkInterfaceId": { "Ref": "ResurfaceENI" }
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
                "#!/bin/bash -xe\n",
                "mkdir -p /etc/ecs/\n",
                "touch /etc/ecs/ecs.config\n",
                "echo ECS_CLUSTER=",
                { "Ref": "ResurfaceCluster" },
                " >> /etc/ecs/ecs.config\n",
                "\n",
                "sudo su root -c \"ip link add vx0 type vxlan id ",
                { "Ref": "MirrorVirtualNetworkID" },
                " local ",
                { "Fn::GetAtt": [ "ResurfaceENI", "PrimaryPrivateIpAddress" ] },
                " remote ",
                { "Ref": "EC2Address" },
                " dev eth0 dstport 4789\"\n",
                "sudo su root -c \"ip link set vx0 up\"\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "ECSTaskExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "ECSTaskExecutionRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": ["ecs-tasks.amazonaws.com", "ecs.amazonaws.com", "ec2.amazonaws.com"]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"],
        "Policies": [
          {
            "PolicyName": "ResurfaceECSPolicy",
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ {
                    "Effect": "Allow",
                    "Action": "ecs:*",
                    "Resource": "*"
                } ]
            } 
          },
          {
            "PolicyName": "AmazonECSforEC2Policy",
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeTags",
                        "ecs:CreateCluster",
                        "ecs:DeregisterContainerInstance",
                        "ecs:DiscoverPollEndpoint",
                        "ecs:Poll",
                        "ecs:RegisterContainerInstance",
                        "ecs:StartTelemetrySession",
                        "ecs:UpdateContainerInstancesState",
                        "ecs:Submit*",
                        "ecr:GetAuthorizationToken",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:BatchGetImage",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ],
                    "Resource": "*"
                } ]
            }
          }
        ]
      }
    },
    "ResurfaceCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "ResurfaceCluster"
      }
    },
    "ResurfaceTaskDef": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "ResurfaceSniffer",
            "Image": "resurfaceio/network-sniffer:1.2.0",
            "Environment": [
              {
                "Name": "USAGE_LOGGERS_URL",
                "Value": { "Ref": "ResurfaceCaptureURL" }
              },
              {
                "Name": "USAGE_LOGGERS_RULES",
                "Value": { "Ref": "ResurfaceRules" }
              },
              {
                "Name": "USAGE_LOGGERS_DISABLED",
                "Value": "false"
              },
              {
                "Name": "APP_PORT",
                "Value": { "Ref": "EC2AppPort" }
              },
              {
                "Name": "VPC_MIRROR_DEVICE",
                "Value": "vx0"
              }
            ]
          }
        ],
        "ExecutionRoleArn": { "Fn::GetAtt":  [ "ECSTaskExecutionRole", "Arn" ] },
        "RequiresCompatibilities": [ "EC2" ],
        "NetworkMode": "host",
        "Cpu": 1024,
        "Memory": 2048
      }
    },
    "ResurfaceService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": "ResurfaceEC2Instance",
      "Properties": {
        "ServiceName": "ResurfaceService",
        "LaunchType": "EC2",
        "Cluster": { "Ref": "ResurfaceCluster" },
        "TaskDefinition": { "Ref": "ResurfaceTaskDef" },
        "DesiredCount": 1
      }
    },
    "ResurfaceMirrorTarget": {
      "Type" : "AWS::EC2::TrafficMirrorTarget",
      "DependsOn": "ResurfaceEC2Instance",
      "Properties" : {
        "Description" : "Network interface that will receive mirrored traffic",
        "NetworkInterfaceId" : { "Ref": "ResurfaceENI" }
      }
    },         
    "ResurfaceMirrorFilter": {
      "Type" : "AWS::EC2::TrafficMirrorFilter"
    },
    "ResurfaceMirrorFilterInboundRule": {
      "Type" : "AWS::EC2::TrafficMirrorFilterRule",
      "Properties" : {
        "Description" : "Mirror all TCP traffic from any location",
        "DestinationCidrBlock" : "0.0.0.0/0",
        "Protocol" : 6,
        "RuleAction" : "accept",
        "RuleNumber" : 100,
        "SourceCidrBlock" : "0.0.0.0/0",
        "TrafficDirection" : "ingress",
        "TrafficMirrorFilterId" : { "Ref": "ResurfaceMirrorFilter" }
      }
    },
    "ResurfaceMirrorFilterOutboundRule": {
      "Type" : "AWS::EC2::TrafficMirrorFilterRule",
      "Properties" : {
        "Description" : "Mirror all TCP traffic to any location",
        "DestinationCidrBlock" : "0.0.0.0/0",
        "Protocol" : 6,
        "RuleAction" : "accept",
        "RuleNumber" : 100,
        "SourceCidrBlock" : "0.0.0.0/0",
        "TrafficDirection" : "egress",
        "TrafficMirrorFilterId" : { "Ref": "ResurfaceMirrorFilter" }
      }
    },
    "ResurfaceMirrorSession": {
      "Type": "AWS::EC2::TrafficMirrorSession",
      "Properties": {
        "NetworkInterfaceId": { "Ref": "EC2NetworkInterfaceID" },
        "TrafficMirrorTargetId": { "Ref": "ResurfaceMirrorTarget" },
        "TrafficMirrorFilterId": { "Ref": "ResurfaceMirrorFilter" },
        "SessionNumber": { "Ref": "MirrorSessionNumber" },
        "VirtualNetworkId": { "Ref": "MirrorVirtualNetworkID" }
      }
    }
  },
  "Outputs": {
    "VNI": {
      "Value": { "Ref": "MirrorVirtualNetworkID" }
    },
    "MirrorTargetIP": {
      "Value": { "Fn::GetAtt": [ "ResurfaceENI", "PrimaryPrivateIpAddress" ] }
    }
  }
}
